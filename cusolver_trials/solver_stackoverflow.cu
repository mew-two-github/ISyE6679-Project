#include <stdio.h>
#include <stdlib.h>
#include <assert.h>

#include <cusparse.h>
#include <cusolverSp.h>

/*******************/
/* iDivUp FUNCTION */
/*******************/
//extern "C" int iDivUp(int a, int b){ return ((a % b) != 0) ? (a / b + 1) : (a / b); }
__host__ __device__ int iDivUp(int a, int b){ return ((a % b) != 0) ? (a / b + 1) : (a / b); }

/********************/
/* CUDA ERROR CHECK */
/********************/
// --- Credit to http://stackoverflow.com/questions/14038589/what-is-the-canonical-way-to-check-for-errors-using-the-cuda-runtime-api
void gpuAssert(cudaError_t code, const char *file, int line, bool abort = true)
{
    if (code != cudaSuccess)
    {
        fprintf(stderr, "GPUassert: %s %s %d\n", cudaGetErrorString(code), file, line);
        if (abort) { exit(code); }
    }
}

extern "C" void gpuErrchk(cudaError_t ans) { gpuAssert((ans), __FILE__, __LINE__); }

/**************************/
/* CUSOLVE ERROR CHECKING */
/**************************/
static const char *_cusolverGetErrorEnum(cusolverStatus_t error)
{
    switch (error)
    {
    case CUSOLVER_STATUS_SUCCESS:
        return "CUSOLVER_SUCCESS";

    case CUSOLVER_STATUS_NOT_INITIALIZED:
        return "CUSOLVER_STATUS_NOT_INITIALIZED";

    case CUSOLVER_STATUS_ALLOC_FAILED:
        return "CUSOLVER_STATUS_ALLOC_FAILED";

    case CUSOLVER_STATUS_INVALID_VALUE:
        return "CUSOLVER_STATUS_INVALID_VALUE";

    case CUSOLVER_STATUS_ARCH_MISMATCH:
        return "CUSOLVER_STATUS_ARCH_MISMATCH";

    case CUSOLVER_STATUS_EXECUTION_FAILED:
        return "CUSOLVER_STATUS_EXECUTION_FAILED";

    case CUSOLVER_STATUS_INTERNAL_ERROR:
        return "CUSOLVER_STATUS_INTERNAL_ERROR";

    case CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED:
        return "CUSOLVER_STATUS_MATRIX_TYPE_NOT_SUPPORTED";

    }

    return "<unknown>";
}

inline void __cusolveSafeCall(cusolverStatus_t err, const char *file, const int line)
{
    if (CUSOLVER_STATUS_SUCCESS != err) {
        fprintf(stderr, "CUSOLVE error in file '%s', line %d, error: %s \nterminating!\n", __FILE__, __LINE__, \
            _cusolverGetErrorEnum(err)); \
            assert(0); \
    }
}

extern "C" void cusolveSafeCall(cusolverStatus_t err) { __cusolveSafeCall(err, __FILE__, __LINE__); }

/***************************/
/* CUSPARSE ERROR CHECKING */
/***************************/
static const char *_cusparseGetErrorEnum(cusparseStatus_t error)
{
    switch (error)
    {

    case CUSPARSE_STATUS_SUCCESS:
        return "CUSPARSE_STATUS_SUCCESS";

    case CUSPARSE_STATUS_NOT_INITIALIZED:
        return "CUSPARSE_STATUS_NOT_INITIALIZED";

    case CUSPARSE_STATUS_ALLOC_FAILED:
        return "CUSPARSE_STATUS_ALLOC_FAILED";

    case CUSPARSE_STATUS_INVALID_VALUE:
        return "CUSPARSE_STATUS_INVALID_VALUE";

    case CUSPARSE_STATUS_ARCH_MISMATCH:
        return "CUSPARSE_STATUS_ARCH_MISMATCH";

    case CUSPARSE_STATUS_MAPPING_ERROR:
        return "CUSPARSE_STATUS_MAPPING_ERROR";

    case CUSPARSE_STATUS_EXECUTION_FAILED:
        return "CUSPARSE_STATUS_EXECUTION_FAILED";

    case CUSPARSE_STATUS_INTERNAL_ERROR:
        return "CUSPARSE_STATUS_INTERNAL_ERROR";

    case CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED:
        return "CUSPARSE_STATUS_MATRIX_TYPE_NOT_SUPPORTED";

    case CUSPARSE_STATUS_ZERO_PIVOT:
        return "CUSPARSE_STATUS_ZERO_PIVOT";
    }

    return "<unknown>";
}

inline void __cusparseSafeCall(cusparseStatus_t err, const char *file, const int line)
{
    if (CUSPARSE_STATUS_SUCCESS != err) {
        fprintf(stderr, "CUSPARSE error in file '%s', line %Ndims\Nobjs %s\nerror %Ndims: %s\nterminating!\Nobjs", __FILE__, __LINE__, err, \
            _cusparseGetErrorEnum(err)); \
            cudaDeviceReset(); assert(0); \
    }
}

extern "C" void cusparseSafeCall(cusparseStatus_t err) { __cusparseSafeCall(err, __FILE__, __LINE__); }

/********/
/* MAIN */
/********/
int main()
{
    // --- Initialize cuSPARSE
    cusparseHandle_t handle;    cusparseSafeCall(cusparseCreate(&handle));

    const int Nrows = 78;                        // --- Number of rows
    const int Ncols = 78;                        // --- Number of columns
    const int N = Nrows;

    // --- Column-major ordering
double h_A_dense[] = {0.0860585,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,1,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0.02,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,1,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.27048,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,20.2695,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.29894,-4.5994,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,16.1788,15.3409,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,-1.18607,-2.02373,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,4.99719,5.16531,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,-1.76187,-2.00586,-6.97782,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,5.34622,5.11969,28.9878,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.08756,-1.77754,0,-6.97098,-2.955e-309,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,4.4891,5.42773,0,21.989,4.24576,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-2.81706e-309,-6.93031,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,4.04736,14.0862,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.6078e-309,-3.12449e-312,5.69561e-309,-1.16359e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,4.87286,0,2.82407e-309,15.787,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16193e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,6.02897,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16255e-308,0,5.92739,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,1.83216,0,2.82407e-309,9.65358,0,18.3623,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,7.38315,-6.87954,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,15.2761,2.56435,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,-2.09185,-1.16091e-308,0,11.5037,-6.86825,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,4.38058,0,0,4.33066,2.53794,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,-1.63282,-1.16091e-308,0,11.5037,-4.89132,0,-2.61345,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,3.39832,0,0,4.33066,-2.08962,0,2.3646,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,-3.31593,-1.16091e-308,0,11.5037,-4.89132,0,-2.62589,-1.17793,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,6.53021,0,0,4.33066,-2.08962,0,2.37586,2.39834,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,9.99991,-4.89132,0,-5.69091e-310,-1.19385,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,7.52928,-2.08962,0,-6.28982e-310,2.43075,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.30357e-312,3.99431e-312,0,3.59953e-309,-3.12449e-312,5.69561e-309,-1.16091e-308,0,11.5037,-4.89132,0,-5.69091e-310,-1.59089e-321,0,8.00344e-313,1.30811e-312,0,5.13e-312,0,2.82407e-309,0,0,4.33066,-2.08962,0,-6.28982e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,-6.27048,-5.29894,3.30357e-312,3.30357e-312,-1.08756,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,3.30357e-312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.99431e-312,1,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,-4.5994,-1.18607,-1.76187,-1.77754,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,3.99431e-312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,-2.02373,-2.00586,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,-6.97782,-6.97098,3.59953e-309,3.6078e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,3.59953e-309,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-2.955e-309,-2.81706e-309,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,-3.12449e-312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,-6.93031,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,-2.09185,-1.63282,-3.31593,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,5.69561e-309,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16359e-308,-1.16193e-308,-1.16255e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,-1.16091e-308,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,5.92739,7.38315,11.5037,11.5037,11.5037,9.99991,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,11.5037,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-6.87954,-6.86825,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,-4.89132,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-2.61345,-2.62589,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,-5.69091e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.17793,-1.19385,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,-1.59089e-321,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,20.2695,16.1788,8.00344e-313,8.00344e-313,4.4891,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,8.00344e-313,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,15.3409,4.99719,5.34622,5.42773,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,1.30811e-312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.16531,5.11969,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,28.9878,21.989,5.13e-312,4.87286,5.13e-312,1.83216,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,5.13e-312,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.24576,4.04736,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,14.0862,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,4.38058,3.39832,6.53021,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,2.82407e-309,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15.787,6.02897,9.65358,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,18.3623,15.2761,4.33066,4.33066,4.33066,7.52928,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,4.33066,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,2.56435,2.53794,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,-2.08962,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,2.3646,2.37586,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,-6.28982e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,2.39834,2.43075,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,6.92437e-310,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
    double h_y[] = {40,40,40,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225.753,13.4936,-96.244,-54.9104,-7.6,5.38456,-2.84615e-311,24,-35.3885,-11.0896,-3.5,-8.85719,-14.7368,-14.9,25.3857,14.4312,-8.28304,29.5385,-1.66932,-1.52778,10.9658,-1.8,13.2174,-0.908676,-5,2.49465,2.51826,-4.6703e-310,0,0,0,0,0,0,0,0,0,0,0,0};

    //create device array and copy host to it
    double *d_A_dense;  gpuErrchk(cudaMalloc(&d_A_dense, Nrows * Ncols * sizeof(*d_A_dense)));
    gpuErrchk(cudaMemcpy(d_A_dense, h_A_dense, Nrows * Ncols * sizeof(*d_A_dense), cudaMemcpyHostToDevice));

    // --- Descriptor for sparse matrix A
    cusparseMatDescr_t descrA;      cusparseSafeCall(cusparseCreateMatDescr(&descrA));
    cusparseSetMatType(descrA, CUSPARSE_MATRIX_TYPE_GENERAL);
    cusparseSetMatIndexBase(descrA, CUSPARSE_INDEX_BASE_ZERO);

    int nnz = 0;                                // --- Number of nonzero elements in dense matrix
    const int lda = Nrows;                      // --- Leading dimension of dense matrix
    // --- Device side number of nonzero elements per row
    int *d_nnzPerVector;    gpuErrchk(cudaMalloc(&d_nnzPerVector, Nrows * sizeof(*d_nnzPerVector)));
    cusparseSafeCall(cusparseDnnz(handle, CUSPARSE_DIRECTION_ROW, Nrows, Ncols, descrA, d_A_dense, lda, d_nnzPerVector, &nnz));
    // --- Host side number of nonzero elements per row
    int *h_nnzPerVector = (int *)malloc(Nrows * sizeof(*h_nnzPerVector));
    gpuErrchk(cudaMemcpy(h_nnzPerVector, d_nnzPerVector, Nrows * sizeof(*h_nnzPerVector), cudaMemcpyDeviceToHost));

    printf("Number of nonzero elements in dense matrix = %i\n\n", nnz);
    for (int i = 0; i < Nrows; ++i) printf("Number of nonzero elements in row %i = %i \n", i, h_nnzPerVector[i]);
    printf("\n");

    // --- Device side dense matrix
    double *d_A;            gpuErrchk(cudaMalloc(&d_A, nnz * sizeof(*d_A)));
    int *d_A_RowIndices;    gpuErrchk(cudaMalloc(&d_A_RowIndices, (Nrows + 1) * sizeof(*d_A_RowIndices)));
    int *d_A_ColIndices;    gpuErrchk(cudaMalloc(&d_A_ColIndices, nnz * sizeof(*d_A_ColIndices)));

    cusparseSafeCall(cusparseDdense2csr(handle, Nrows, Ncols, descrA, d_A_dense, lda, d_nnzPerVector, d_A, d_A_RowIndices, d_A_ColIndices));

    // --- Host side dense matrix
    double *h_A = (double *)malloc(nnz * sizeof(*h_A));
    int *h_A_RowIndices = (int *)malloc((Nrows + 1) * sizeof(*h_A_RowIndices));
    int *h_A_ColIndices = (int *)malloc(nnz * sizeof(*h_A_ColIndices));
    gpuErrchk(cudaMemcpy(h_A, d_A, nnz*sizeof(*h_A), cudaMemcpyDeviceToHost));
    gpuErrchk(cudaMemcpy(h_A_RowIndices, d_A_RowIndices, (Nrows + 1) * sizeof(*h_A_RowIndices), cudaMemcpyDeviceToHost));
    gpuErrchk(cudaMemcpy(h_A_ColIndices, d_A_ColIndices, nnz * sizeof(*h_A_ColIndices), cudaMemcpyDeviceToHost));

    for (int i = 0; i < nnz; ++i) printf("A[%i] = %.0f ", i, h_A[i]); printf("\n");

    for (int i = 0; i < (Nrows + 1); ++i) printf("h_A_RowIndices[%i] = %i \n", i, h_A_RowIndices[i]); printf("\n");

    for (int i = 0; i < nnz; ++i) printf("h_A_ColIndices[%i] = %i \n", i, h_A_ColIndices[i]);

    // --- Allocating and defining dense host and device data vectors
    // double *h_y = (double *)malloc(Nrows * sizeof(double));
    // h_y[0] = 100.0;  h_y[1] = 200.0; h_y[2] = 400.0; h_y[3] = 500.0;

    double *d_y;        gpuErrchk(cudaMalloc(&d_y, Nrows * sizeof(double)));
    gpuErrchk(cudaMemcpy(d_y, h_y, Nrows * sizeof(double), cudaMemcpyHostToDevice));

    // --- Allocating the host and device side result vector
    double *h_x = (double *)malloc(Ncols * sizeof(double));
    double *d_x;        gpuErrchk(cudaMalloc(&d_x, Ncols * sizeof(double)));

    // --- CUDA solver initialization
    cusolverSpHandle_t solver_handle;
    cusolverSpCreate(&solver_handle);

    // --- Using LU factorization
    int singularity;
    cusolveSafeCall(cusolverSpDcsrlsvluHost(solver_handle, N, nnz, descrA, h_A, h_A_RowIndices, h_A_ColIndices, h_y, 0.000001, 0, h_x, &singularity));
    // --- Using QR factorization
    //cusolveSafeCall(cusolverSpDcsrlsvqrHost(solver_handle, N, nnz, descrA, h_A, h_A_RowIndices, h_A_ColIndices, h_y, 0.000001, 0, h_x, &singularity));

    //int rankA;
    //int *p = (int *)malloc(N * sizeof(int));
    //double min_norm;
    //cusolveSafeCall(cusolverSpDcsrlsqvqrHost(solver_handle, N, N, nnz, descrA, h_A, h_A_RowIndices, h_A_ColIndices, h_y, 0.000001, &rankA, h_x, p, &min_norm));

    printf("Showing the results...\n");
    for (int i = 0; i < N; i++) printf("%f\n", h_x[i]);
}
